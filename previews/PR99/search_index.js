var documenterSearchIndex = {"docs":
[{"location":"generated/HowTo/group_average/#Calculate-group-averages","page":"Calculate group average","title":"Calculate group averages","text":"","category":"section"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"using UnfoldBIDS\nusing Unfold\nusing DataFrames\nusing Statistics\nusing CairoMakie, AlgebraOfGraphics\nusing LazyArtifacts\nusing Main: @artifact_str # this is a workaround for Artifacts used in docs; locally you would `using LazyArtifacts`","category":"page"},{"location":"generated/HowTo/group_average/#Analysis","page":"Calculate group average","title":"Analysis","text":"","category":"section"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"First let's redo the steps from the quickstart tutorial","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"sample_data_path = artifact\"sample_BIDS\"\nlayout_df = bids_layout(sample_data_path, derivatives=false);\ndata_df = load_bids_eeg_data(layout_df);\nnothing #hide","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"Calculate results","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"basisfunction = firbasis(τ=(-0.2,.8),sfreq=1024)\nf  = @formula 0~1\nbfDict = [\"stimulus\"=>(f,basisfunction)]\nUnfoldBIDS.rename_to_latency(data_df, :sample); # Unfold expects a :latency collumn in your events; if your event latency is named differently you can use this function as remedy\n\nresultsAll = run_unfold(data_df, bfDict; eventcolumn=\"trial_type\");\nnothing #hide","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"Now, let's transform the data into a tidier format (Note: We use raw data without a high-pass filter here so estimates will be quite off)","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"tidy_df = unpack_results(bids_coeftable(resultsAll))\nfirst(tidy_df, 5)","category":"page"},{"location":"generated/HowTo/group_average/#Calculate-average-over-subjects","page":"Calculate group average","title":"Calculate average over subjects","text":"","category":"section"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"mean_df = combine(groupby(tidy_df, [:time, :coefname]), :estimate => mean)\nfirst(mean_df, 5)","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"Importantly, the above can be extended to groupbyan arbitrary number of covariates!","category":"page"},{"location":"generated/HowTo/group_average/#Plot-results-using-AOG","page":"Calculate group average","title":"Plot results using AOG","text":"","category":"section"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"plt = data(mean_df) * mapping(:time, :estimate_mean, color = :coefname, group=:coefname => nonnumeric) * visual(Lines)\ndraw(plt, axis=(yticklabelsvisible=false,))","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"","category":"page"},{"location":"generated/HowTo/group_average/","page":"Calculate group average","title":"Calculate group average","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#UnfoldBIDS._load_results","page":"API: Toolbox Functions","title":"UnfoldBIDS._load_results","text":"_load_results(files_df; generate_Xs::Bool = true)\n\nInternal function to load Unfold models into memory. Can also be used to load data after file information was loaded lazily (lazy=true) using load_results()\n\n\n\n\n\n","category":"function"},{"location":"api/#UnfoldBIDS.add_event_files!-Tuple{Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.add_event_files!","text":"add_event_files!(layoutDF)\n\nFunction to find and load all events file-paths into Layout-DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.bids_coeftable-Tuple{Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.bids_coeftable","text":"bids_coeftable(model_df)\n\nTurns all models found in model_df into tydy DataFrames and aggregates them in a new DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.bids_effects-Tuple{DataFrames.DataFrame, Dict}","page":"API: Toolbox Functions","title":"UnfoldBIDS.bids_effects","text":"bids_effects(model_df::DataFrame, effects_dict::Dict)\n\nCalculate mariginalized effect on all subjects found in the model dataframe using effects_dict.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.bids_layout-Tuple{AbstractString}","page":"API: Toolbox Functions","title":"UnfoldBIDS.bids_layout","text":"bids_layout(bidsPath::AbstractString;\n    derivatives::Bool=true,\n    specific_folder::Union{Nothing,AbstractString}=nothing,\n    exclude_folder::Union{Nothing,AbstractString}=nothing,\n    ses::Union{Nothing,AbstractString}=nothing,\n    task::Union{Nothing,AbstractString}=nothing,\n    run::Union{Nothing,AbstractString}=nothing)\n\nMain function to load paths of all subjects in one bids_root folder. Will return a DataFrame containing all found paths with specific subject information. Used before loading data into memore using load_bids_eeg_data\n\nKeywords\n\nderivatives::Bool = true\n Look for data in the derivatives folder\nspecific_folder::Union{Nothing,AbstractString} = nothing\n Specify a specific folder name in either derivatives or bids_root to look for data.\nexclude_folder::Union{Nothing,AbstractString} = nothing\n Exclude a specific folder from data detection.\nses:Union{Nothing,AbstractString} = nothing\n Which session to load; loads all if nothing\ntask::Union{Nothing,AbstractString} = nothing\n Which task to load; loads all if nothing\nrun::Union{Nothing,AbstractString} = nothing\n Which run to load; loads all if nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.check_df-NTuple{4, Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.check_df","text":"check_df(files_df, ses, task, run)\n\nInternal; Checks if the multiple sessions/task/runs are found if none of these are provided\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.extract_subject_id!-Tuple{Any, Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.extract_subject_id!","text":"extract_subject_id!(files_df, file)\n\nInternal function to get subject information from dataframe.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.list_all_paths-Tuple{Any, Any, Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.list_all_paths","text":"list_all_paths(path)\n\nInternal function to find pathfiles\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.load_bids_eeg_data-Tuple{Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.load_bids_eeg_data","text":"load_bids_eeg_data(layout_df; verbose::Bool=true, kwargs...)\n\nLoad data found with bids_layout into memory.\n\nverbose::Bool = true\n Show ProgressBar\nkwargs...\n kwargs for CSV.read to load events from .tsv file; e.g. to specify delimeter\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.load_events-Tuple{DataFrames.DataFrame}","page":"API: Toolbox Functions","title":"UnfoldBIDS.load_events","text":"load_events(layoutDF::DataFrame; kwargs...)\n\nInternal function to load events based on paths in the layout Df\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.load_results-Tuple{String}","page":"API: Toolbox Functions","title":"UnfoldBIDS.load_results","text":"load_results(bids_root::String;\n    derivatives_subfolder::String=\"Unfold\",\n    lazy::Bool=false,\n    generate_Xs::Bool = true,\n    ses::Union{Nothing,AbstractString}=nothing,\n    task::Union{Nothing,AbstractString}=nothing,\n    run::Union{Nothing,AbstractString}=nothing)\n\nLoad Unfold models existing in a derivatives_subfolder in your BIDS root folder. \n\nKeywords\n\nderivatives_subfolder::String = \"Unfold\"\n Defines in which subfolder of bids_root/derivatives to look for Unfold models.\nlazy::Bool = false\n Do not actually load the dataset into memore if true, only return a dataframe with paths\ngenerate_Xs::Bool = true\n By default recreate the designmatrix; Can be set to false, to improve loading time.\nses::Union{Nothing,AbstractString} = nothing\n Which session to load; loads all if nothing\ntask::Union{Nothing,AbstractString} = nothing\n Which task to load; loads all if nothing\nrun::Union{Nothing,AbstractString} = nothing\n Which run to load; loads all if nothing\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.raw_to_data-Tuple{Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.raw_to_data","text":"raw_to_data(raw; channels::AbstractVector{<:Union{String,Integer}}=[])\n\nFunction to get data from MNE raw object. Can choose specific channels; default loads all channels.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.rename_to_latency-Tuple{Any, Symbol}","page":"API: Toolbox Functions","title":"UnfoldBIDS.rename_to_latency","text":"rename_to_latency(data_df)\n\nThis is a convenience function to add a :latency collumn (needed by Unfold) based on another variable in the events_df (e.g. sample)\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.run_unfold-Tuple{Any, Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.run_unfold","text":"run_unfold(dataDF, bfDict; \n\teventcolumn=\"event\",\n\tremove_time_expanded_Xs=true, \n\textract_data = raw_to_data, \n\tverbose::Bool=true, \n\tkwargs...)\n\nRun Unfold analysis on all data in dataDF.\n\nKeywords\n\neventcolumn::String = \"event\"\n Which collumn Unfold should use during the analysis.\nremove_time_expanded_Xs::Bool = true\n Removes the timeexpanded designmatrix which significantly reduces the memory-consumption. This Xs is rarely needed, but can be recovered (look into the Unfold.load function)\nextract_data::function = raw_to_data\n Specify the function that translate the MNE Raw object to an data array. Default is raw_to_data which uses get_data and allows to pick channels - see @Ref(raw_to_data). The optional kw- arguments (e.g. channels) need to be specified directly in the run_unfold function as kw-args\nverbose::Bool = true)\n Show ProgressBar or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.save_results-Tuple{DataFrames.DataFrame, String}","page":"API: Toolbox Functions","title":"UnfoldBIDS.save_results","text":"save_results(results::DataFrame, bids_root::String; \n    derivatives_subfolder::String=\"Unfold\",\n    overwrite::Bool=false)\n\nFunction to save unfold models in your BIDS root folder. Automatically creates a derivatives_subfolder (default = \"Unfold\") in the derivatives and subsequentely safes each model in results according to BIDS. Example of path to saved file: bids_root/derivatives/Unfold/sub-XXX/eeg/sub-XXX_ses-XX_task-XXX_run-XX_unfold.jld2\n\nKeywords\n\nderivatives_subfolder::String = \"Unfold\"\n Creates the named subfolder and saves Unfold models according to BIDS.\noverwrite::Bool = false\n Does not overwrite existing datasets; can be set to true.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.unpack_events-Tuple{DataFrames.DataFrame}","page":"API: Toolbox Functions","title":"UnfoldBIDS.unpack_events","text":"unpack_events(df::DataFrame)\n\nUnpack events into tidy data frame; useful with AlgebraOfGraphics.jl\n\ndf is expected to be a UnfoldBIDS DataFrame where events are loaded already.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldBIDS.unpack_results-Tuple{Any}","page":"API: Toolbox Functions","title":"UnfoldBIDS.unpack_results","text":"unpack_results(results_df)\n\nUnpack all results into one tidy dataframe/ coeftable.\n\n\n\n\n\n","category":"method"},{"location":"generated/reference/BIDS/#Brain-Imaging-Data-Structure","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"","category":"section"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"If you are using UnfoldBIDS we assume you are already familiar with the BIDS format. However, since the package only works if your dataset is BIDS formatted, here is a quick reminder. If you want a more in-depth explanation, please refer to the official BIDS documentation","category":"page"},{"location":"generated/reference/BIDS/#Folder-Structure","page":"Brain Imaging Data Structure","title":"Folder Structure","text":"","category":"section"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"Folders have to follow the following structure:","category":"page"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"  |-BIDS-Root/\n      |--- [required meta files]\n      |--- sub-<label>/\n          |--- eeg/\n              |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_eeg.<extension>\n              |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_eeg.json\n              |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_events.json\n              |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_events.tsv\n      |--- derivatives/ <- for (pre-processed data)\n         |--- [required meta files]\n         |--- sub-<label>/\n              |--- eeg/\n                  |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_eeg.<extension>\n                  |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_eeg.json\n                  |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_events.json\n                  |--- sub-<label>[_ses-<label>]_task-<label>[_acq-<label>][_run-<index>]_events.tsv","category":"page"},{"location":"generated/reference/BIDS/#File-formats","page":"Brain Imaging Data Structure","title":"File formats","text":"","category":"section"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"By BIDS standard your files have to be in one of the following formats: EEG","category":"page"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"edf (European Data Fromat; single file)\nvhdr (BrainVision format; file triplet of .vhdr, .vmrk and .eeg)\nset (EEGLAB saved file; .fdt file optional)\nfif (MNE save file; not BIDS conform, but implemented for convenience)","category":"page"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"Events UnfoldBIDS.jl will automatically try to load accompanying events.tsv files. Loading events from the EEG data files is currently not supported, and not BIDS conform.","category":"page"},{"location":"generated/reference/BIDS/#BIDS-Transformation","page":"Brain Imaging Data Structure","title":"BIDS Transformation","text":"","category":"section"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"If your dataset is not yet BIDS conform you can use MNE-BIDS to transform your data.","category":"page"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"","category":"page"},{"location":"generated/reference/BIDS/","page":"Brain Imaging Data Structure","title":"Brain Imaging Data Structure","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/reference/overview/#Toolbox-overview","page":"Toolbox overview","title":"Toolbox overview","text":"","category":"section"},{"location":"generated/reference/overview/","page":"Toolbox overview","title":"Toolbox overview","text":"","category":"page"},{"location":"generated/reference/overview/","page":"Toolbox overview","title":"Toolbox overview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"using UnfoldBIDS\nusing Unfold\nusing LazyArtifacts\nusing Main: @artifact_str # this is a workaround for Artifacts used in docs; locally you would `using LazyArtifacts`","category":"page"},{"location":"generated/tutorials/quickstart/#Loading-data","page":"Quickstart","title":"Loading data","text":"","category":"section"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"To load use UnfoldBIDS to find the paths to all subject specific data you can uye the bidsLayout function:","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"sample_data_path = artifact\"sample_BIDS\"\nlayout_df = bids_layout(sample_data_path, derivatives=false)","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"This will give you a DataFrame containing the paths too the eeg files of all subjects plus their accompanying event files","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"note: Note\nSince we set the derivative keyword to false here UnfoldBIDS will only look for the raw EEG files. However, by default UnfoldBIDS assumes you have preprocessed data in a derivatives folder and try to look for those.","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"Subsequently, you can load the data of all subjects into memory","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"data_df = load_bids_eeg_data(layout_df)","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"note: Note\nAt this point in time, the data is not yet actually loaded into memory, but uses MNE's lazy loading functionality.","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"As you can see, UnfoldBIDS trys to load events directly into the DataFrame, however if you are missing the event tsv files you will get a warning and no events are loaded. If that happens you have to manually load these events. The following function might help you with this. (The resulting dataframe still needs to be added to data_df!)","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"events_df = load_events(layout_df)","category":"page"},{"location":"generated/tutorials/quickstart/#Run-unfold-type-models","page":"Quickstart","title":"Run unfold type models","text":"","category":"section"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"basisfunction = firbasis(τ=(-0.2,.8),sfreq=1024)\nbasisfunction_resp = firbasis(τ=(-0.4,.4),sfreq=1024)\nf  = @formula 0~1\nbfDict = [\"stimulus\"=>(f,basisfunction), \"response\"=>(f,basisfunction_resp)]\nUnfoldBIDS.rename_to_latency(data_df, :sample) # Unfold expects a :latency collumn in your events; if your event latency is named differently you can use this function as remedy\n\nresultsAll = run_unfold(data_df, bfDict; eventcolumn=\"trial_type\");\nnothing #hide","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"","category":"page"},{"location":"generated/tutorials/quickstart/","page":"Quickstart","title":"Quickstart","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/#Apply-MNE-preprocessing","page":"Apply preprocessing functions","title":"Apply MNE preprocessing","text":"","category":"section"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"When using run_unfold on your BIDS dataset it is usually assumed that your data is already preprocessed (or you want to have a look at the raw data). However, you also have the option to apply some further processing to your data. This is done by providing a custom function as extract_data keyword to run_unfold.","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"I.e. run_unfold(dataDF, bfDict; extract_data = your_custom_function)","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"By default raw_to_data is used.","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"function raw_to_data(raw; channels::AbstractVector{<:Union{String,Integer}}=[])\n  return pyconvert(Array, raw.get_data(picks=pylist(channels), units=\"uV\"))\nend","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"You can exchange this function through an arbitrary function (applying MNE processing as needed), as long as it takes the raw MNE data object and returns a pyconverted Julia Array containing the data stream. For example","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"function raw_to_filtered_data(raw; channels::AbstractVector{<:Union{String,Integer}}=[], l_freq=0.5, h_freq=45)\n\n  # Load data into memory\n  raw.load_data()\n\n  # Re-reference to mastoids and add Cz back in\n  UnfoldBIDS.PyMNE.add_reference_channels(raw, ref_channels=UnfoldBIDS.pylist([\"Cz\"]), copy=false)\n  raw.set_eeg_reference(ref_channels=UnfoldBIDS.pylist([\"RM\", \"LM\"]))\n\n  # Filter data\n  raw.filter(l_freq, h_freq, picks=\"eeg\")\n\n  return UnfoldBIDS.pyconvert(Array, raw.get_data(picks=UnfoldBIDS.pylist(channels), units=\"uV\"))\nend","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"However, including a preprocessing step right before fitting your model can often be a bottleneck in performance. If you think you will more likely only apply some preprocessing and then play around with the model, it's often more advisable to preprocess the raw objects in the dataframe before fitting.","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"function ref_and_filter_data!(raw; l_freq=0.5, h_freq=45)\n  raw.load_data()\n\n  # Re-reference to mastoids and add Cz back in\n  UnfoldBIDS.PyMNE.add_reference_channels(raw, ref_channels=UnfoldBIDS.pylist([\"Cz\"]), copy=false)\n  raw.set_eeg_reference(ref_channels=UnfoldBIDS.pylist([\"RM\", \"LM\"]))\n\n  # Filter data\n  raw.filter(l_freq, h_freq, picks=\"eeg\")\n\nend\n\nfor row in eachrow(loaded_data_df)\n  ref_and_filter_data!(row.raw)\nend","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"","category":"page"},{"location":"generated/HowTo/ApplyPreprocessing/","page":"Apply preprocessing functions","title":"Apply preprocessing functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/HowTo/IO/#Save/-load-Unfold.jl-results","page":"Save/ load Unfold results","title":"Save/ load Unfold.jl results","text":"","category":"section"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"With UnfoldBIDS you can easily save your unfold results in a BIDS conform way, and later load those results. Under the hood, this is a more fancy application of the way you can save results with Unfold.jl","category":"page"},{"location":"generated/HowTo/IO/#Save","page":"Save/ load Unfold results","title":"Save","text":"","category":"section"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"To save results you only need your results DataFrame, which was returned by run_unfold(), and the path to your BIDS root folder","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"save_results(results, bids_root)","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"UnfoldBIDS will then automatically create a dedicated \"Unfold\" folder in your derivatives and save each subject's UnfoldModel in a BIDS conform way in JLD2 format. The data will then be saved as path/to/your/bids_root/derivatives/Unfold/sub-XXX/eeg/sub-XXX_ses-XX_task-XXX_run-XX_unfold.jld2","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"note: Note\nsave_results has two more keywords: derivatives_subfolder let's you specifiy a different foldername than \"Unfold\"; and overwrite::Bool indicates if the function should check for existing files with the same name.","category":"page"},{"location":"generated/HowTo/IO/#Load","page":"Save/ load Unfold results","title":"Load","text":"","category":"section"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"To load results that have been saved with save_results(), simply provide your bids_root folder again + any further information necessary (for example which run to load, or if you have saved the results in folder different than the \"Unfold\" default)","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"load_results(bids_root)","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"You can additionally specifiy to load results, lazily (using the keyword lazy=true) to only load the paths/filenames; or choose to not reconstruct the designmatrix (using the keyword generate_Xs=false)","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"","category":"page"},{"location":"generated/HowTo/IO/","page":"Save/ load Unfold results","title":"Save/ load Unfold results","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#UnfoldBIDS.jl-Documentation","page":"Home","title":"UnfoldBIDS.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for UnfoldBIDS, a helpful wrapper for Unfold style analysis applied to BIDS structured datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need more information on BIDS, a quick overview and further reading can be found at Reference/Brain Imaging Data Structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Flowchart showing UnfoldBIDS' place in the Unfold environment)","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:60%; margin: auto;\">\n</div>","category":"page"},{"location":"#Key-features-and-usage","page":"Home","title":"Key features & usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Find paths to all subject data within a BIDS dataset with one function 🔎\nApply MNE-preprocessing ⚒️\nApply Unfold.jl style analysis on all subjects in one go ⚡\nMade using DataFrames.jl, ready for second level analysis 🏁","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"UnfoldBIDS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more detailed instructions please refer to Installing Julia & Unfold Packages.","category":"page"},{"location":"#Where-to-start:-Learning-roadmap","page":"Home","title":"Where to start: Learning roadmap","text":"","category":"section"},{"location":"#1.-First-steps","page":"Home","title":"1. First steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"🔗 Quickstart","category":"page"},{"location":"#2.-Intermediate-topics","page":"Home","title":"2. Intermediate topics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"📌 Goal: Use DataFrames to calculate group averages","category":"page"},{"location":"","page":"Home","title":"Home","text":"🔗 Calculate group average","category":"page"},{"location":"#3.-Advanced-topics","page":"Home","title":"3. Advanced topics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"📌 Goal: Data preprocessing using MNE","category":"page"},{"location":"","page":"Home","title":"Home","text":"🔗 Apply preprocessing functions","category":"page"},{"location":"#Statement-of-need","page":"Home","title":"Statement of need","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"UnfoldBIDS.jl integrates the loading of BIDS-compliant datasets with the Unfold.jl package into a single, cohesive tool, enabling streamlined rERP analysis of BIDS-compliant data. This simplifies the otherwise cumbersome and error-prone task of writing scripts to load subject data iteratively, reducing it to just a few lines of code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For researchers not relying on a subject list to look up subject-specific data, the default approach recursively walks through the entire directory, adding file paths that match a specific pattern. However, this method can be slow, particularly in directories with numerous subfolders, as required by BIDS. UnfoldBIDS.jl addresses this issue by using the Continuables.jl package to quickly search for suitable file paths, speeding up file searches even in large datasets with hundreds of subjects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, many researchers write their loading scripts using loops that load data directly and recursively into memory, which can slow down the process, especially with large datasets. UnfoldBIDS.jl overcomes this in two ways. First by forcing the user to initially load and inspect all paths, including subject specific data, to make sure only datasets are loaded that are actually needed. And second, by utilizing MNE's lazy loading function by default, ensuring that data is only loaded when necessary. In summary, UnfoldBIDS.jl provides a convenient interface for processing BIDS-compliant EEG data in the Julia programming language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!---\nNote: The statement of need is also used in the `README.md`. Make sure that they are synchronized.\n-->","category":"page"},{"location":"generated/HowTo/find_non_bids/#How-to-find-non-BIDS-and/or-non-EEG-data","page":"Find non-BIDS conform data","title":"How to find non-BIDS and/or non-EEG data","text":"","category":"section"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"In some cases you might want to use a dataset that is not (entirely) BIDS compatible. While UnfoldBIDS.jl is expecting you to comply with the BIDS structure, you can also make use of the underlying functions to (at least) find your data.","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"The key element here is that a lot of what bids_layout() is doing, is to find the right data based on your input. However, you can also do that manually, by using UnfoldBIDS.list_all_paths() The function takes in a few keywords:","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"UnfoldBIDS.list_all_paths(path, file_ending, file_pattern; exclude=nothing)","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"Where","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"path::String = path_to_data_folder; should be input with abspath() \n\nfile_ending::String = data_file_ending; UnfoldBIDS is looking for file_ending = [\".set\", \".fif\", \".vhdr\", \".edf\"], but maybe you are looking for a \".mat\" or \".nifti\"? \n\nfile_pattern::String = ses_task_run; this control for which session/task/run you are looking for (e.g. \"ses-001\"); can be empty String to look for everything: file_pattern = [\"\"] \n\nexclude = folder_to_exclude; If there is a folder in your pathtodata_folder you want to exclude you can input this here; defaults to nothing\n","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"In an applied case you would then:","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"# path settings\nbidsPath = \"path/to/folder\"\nfile_ending = [\".mat\"]\nfile_pattern = [\"\"]\nexclude = nothing\n\n# Find paths\nall_paths = collect(UnfoldBIDS.list_all_paths(abspath(bidsPath), file_ending, file_pattern, exclude=exclude))","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"note: Note\nIt is not tested whether you can find data that is stored in a different way than BIDS structured (e.g. all files in one folder instead of one sub-XXX folder per subject); but technically this should be possible.","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"Additionally you want to put your found paths in a nicer DataFrame containing subject specific information","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"# Init a files DataFrame\nfiles_df = DataFrame(subject=[], ses=[], task=[], run=[], file=[])  # Initialize an empty DataFrame to hold results\n\n# Add subject information\nfor path in all_paths\n    UnfoldBIDS.extract_subject_id!(files_df, path)\nend\n\n# Check for multiple session/tasks/runs\nses = nothing; task = nothing; run = nothing;\nUnfoldBIDS.check_df(files_df, ses, task, run)","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"note: Note\nThis does not look for your events; and if you used a different file ending than UnfoldBIDS' default you won't be able to use load_bids_eeg_data with your DataFrame!","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"","category":"page"},{"location":"generated/HowTo/find_non_bids/","page":"Find non-BIDS conform data","title":"Find non-BIDS conform data","text":"This page was generated using Literate.jl.","category":"page"}]
}
